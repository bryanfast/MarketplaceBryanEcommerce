@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService

<PageTitle>Carrito de Compras</PageTitle>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <container class="container2">
        <div class="d-flex justify-content-center h-100">
            <div class="col-md-12 text-center">
                <span class="display-1 d-block">Opps..</span>
                <div class="mb-4 lead">@message</div>
                <a href="/" class="btn btn-link">Regresar a la tienda</a>
            </div>
        </div>
    </container>
}else if (orderPLaced)
{
    
    <container class="container2">
        <div class="d-flex justify-content-center h-100">
            <div class="col-md-12 text-center">
                <span class="display-1 d-block">Gracias por su compra!</span>
                <span>Puede verificar su orden de compra en el panel de Ordenes <a href="/orders">aqui</a>.</span>
            </div>
        </div>
    </container>
}

else
{
    <div class="justify-content-center">
        <br/>
        <center><h3>Carrito de Compras</h3></center>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProducType</span><br />
                    <input type="number" value="@product.Quantity" @onchange="@((ChangeEventArgs e)=>UpdateQuantity(e,product))" class="form-control input-quantity" min="1" />
                    <button class="btn-delete" @onclick="@(()=>RemoveItemCart(product.ProductId,product.ProductTypeId))">Delete</button>
                </div>
                <div class="cart-product-price">
                    $@(product.Price*product.Quantity)
                </div>
            </div>
        }
        <div class="container2">
            <div class="d-flex justify-content-center h-100">
            <div class="card">
                <div class="cart-product-price-total">
                    <table class="table">
                        <tbody>
                            <tr>
                                <td>Iva(19%):</td>
                                <td>$@Math.Round(cartProducts.Sum(product =>product.Price*product.Quantity*19/100))</td>
                            </tr>
                            <tr>
                                <td>Total (@cartProducts.Count): </td>
                                <td> $@cartProducts.Sum(product =>product.Price*product.Quantity)</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <button class="alert-success btn" @onclick="PlaceOrder">Ordenar</button>
            </div>
            </div>
        </div>
        <br />
        <br />
    </div>

}

@code {
    List<CartProductResponse>? cartProducts = null;
    string message = "Cargando productos del carrito de compras...";
    bool orderPLaced = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task RemoveItemCart(int productId, int productTypeId)
    {
        await CartService.RemoveItemCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();
        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "El carrito esta vacio.";
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value!.ToString()!);
        if (product.Quantity < 1)
        {
            product.Quantity = 1;
            e.Value = 1;
        }
        await CartService.UdpateQuantity(product);
    }

    private async Task PlaceOrder()
    {
        await OrderService.PlaceOrder();
        await CartService.GetCartItemsCount();
        orderPLaced = true;
    }
}
