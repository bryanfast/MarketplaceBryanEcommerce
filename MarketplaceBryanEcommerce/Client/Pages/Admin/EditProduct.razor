@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (loading)
{
    <center><span>@msg</span></center>
}
else

{
    <br/>
    @if (product.Editing)
    {
        <center><h3>Editar "@product.Title"</h3></center>
    }
    else if (product.IsNew)
    {
        <h3>Crear un Producto Nuevo</h3>
    }
        <EditForm Model="product" OnValidSubmit="AddOrUpdateProduct">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="text-bryan">
                <label for="title">Titulo</label>
                <InputText id="title" @bind-Value="product.Title" class="form-control"></InputText>
            </div>
            <div class="text-bryan">
                <label for="imgUrl">Url de la Imagen</label>
                <InputText id="imgUrl" @bind-Value="product.ImageUrl" class="form-control"></InputText>
            </div>
            <div class="card-img">
                @if (!string.IsNullOrEmpty(product.ImageUrl))
                {
                    <img class="img" src="@product.ImageUrl"/>
                }
                else
                {
                    foreach(var image in product.Images)
                    {
                        @*<img src="@image.Data"/>
                        <button type="button" @onclick="(()=>RemoveImage(image.Id))">Eliminar</button>*@
                        <MudCard Class="ma-1">
                            <MudCardContent>
                                <MudImage Src="@image.Data"/>
                            </MudCardContent>
                            <MudCardActions Style="justify-content:center;">
                                <MudButton Variant="Variant.Filled"
                                Color="Color.Error"
                                OnClick="@(()=>RemoveImage(image.Id))">
                                Eliminar
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    }
                }
            </div>
            <br/>
            <div class="text-bryan">
                <InputFile id="images" OnChange="OnFileChange" multiple class="form-control"></InputFile>
            </div>
            <div class="mb-0 text-bryan">
                <label for="description">Descripción</label>
                <InputTextArea id="description" @bind-Value="product.Description" class="form-control"></InputTextArea>
            </div>
            <hr/>
            <div class="header">
                <div class="col">Tipo de Producto/Variante</div>
                <div class="col">Precio</div>
                <div class="col">Precio Original</div>
                <div class="col">Visible</div>
                <div class="col"></div>
            </div>
            <div class="text-bryan">
            @foreach(var variant in product.Variants)
            {
                <div class="row">
                    <div class="col">
                        <InputSelect disabled="@variant.Deleted" @bind-Value="variant.ProductTypeId" class="form-control">
                            @foreach(var productType in ProductTypeService.ProductTypes)
                            {
                                <option value="@productType.Id.ToString()">@productType.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col">
                        <InputNumber @bind-Value="variant.Price" class="form-control" disabled="@variant.Deleted"></InputNumber>
                    </div>
                    <div class="col">
                        <InputNumber @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.Deleted"></InputNumber>
                    </div>
                    <div class="col col-visible">
                        <InputCheckbox @bind-Value="variant.Visible" class="form-check-input" style="transform:scale(1.5,1.5);" disabled="@variant.Deleted"></InputCheckbox>
                    </div>
                    <div class="col">
                        <button type="button" class="btn btn-primary" disabled="@variant.Deleted" @onclick="@(()=>RemoveVariant(variant.ProductTypeId))">
                            <i class="oi oi-trash"></i>
                        </button>
                    </div>
                </div>
            }
            </div>
            <div class="text-bryan">
                <button type="button" class="btn btn-primary" @onclick="AddVariant">
                                <i class="oi oi-plus"></i> Agregar Variante
                 </button>
            </div>
            
            <hr/>
            <div class="mb-0 text-bryan">
                <label for="category">Categoria</label>
                <InputSelect id="category" @bind-Value="product.CategoryId" class="form-control">
                    @foreach(var category in CategoryService.AdminCategories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </InputSelect>
            </div>
            <br/>
            <div class="text-bryan">
                <InputCheckbox style="transform:scale(1.5,1.5);" id="featured" @bind-Value="product.Featured" class="form-check-input"></InputCheckbox>
                <label for="featured" class="form-check-label">Producto Destacado</label>
                <InputCheckbox style="transform:scale(1.5,1.5);" id="visible" @bind-Value="product.Visible" class="form-check-input"></InputCheckbox>
                <label for="visible" class="form-check-label">Visible</label>
            </div>
            <hr/>
            <center><button type="submit" class="btn btn-primary">@btnText</button></center>
            <ValidationSummary></ValidationSummary>

        </EditForm>
        <br/>
        @if (!product.IsNew)
        {
            <center>
                <button type="button" class="btn btn-danger" @onclick="DeleteProduct">
                    Eliminar Producto
                </button>
            </center>
        }
}

@code {
    [Parameter]
    public int Id { get; set; }

    Product product = new Product();
    bool loading = true;
    string btnText = "";
    string msg = "Cargando...";

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        await CategoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            product = new Product { IsNew = true };
            btnText = "Crear Producto";
        }
        else
        {
            Product dbProduct = (await ProductService.GetProduct(Id)).Data;
            if (dbProduct == null)
            {
                msg = $"El producto con Id '{Id}' no existe";
                return;
            }
            product = dbProduct;
            product.Editing = true;
            btnText = "Actualizar Producto";
        }
        loading = false;
    }

    void RemoveVariant(int productTypeId)
    {
        var variant = product.Variants.Find(v => v.ProductTypeId == productTypeId);
        if (variant == null)
        {
            return;
        }
        if (variant.IsNew)
        {
            product.Variants.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }

    void AddVariant()
    {
        product.Variants.Add(new ProductVariant { IsNew = true, ProductId = product.Id });
    }

    async void AddOrUpdateProduct()
    {
        if (product.IsNew)
        {
            var result = await ProductService.CreateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{result.Id}");
        }
        else
        {
            product.IsNew = false;
            product = await ProductService.UpdateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{product.Id}", true);
        }
    }
    async void DeleteProduct()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Usted realmente desea borrar '{product.Title}'?");
        if (confirmed)
        {
            await ProductService.DeleteProduct(product);
            NavigationManager.NavigateTo("admin/products");
        }

    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach(var image in e.GetMultipleFiles(int.MaxValue))
        {
            var resizedImage = await image.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            product.Images.Add(new Image { Data = imageData });
        }
    }
    void RemoveImage(int id)
    {
        var image = product.Images.FirstOrDefault(i => i.Id == id);
        if (image != null)
        {
            product.Images.Remove(image);
        }
    }
}
