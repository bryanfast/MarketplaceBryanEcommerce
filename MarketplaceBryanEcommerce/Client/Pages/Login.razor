@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject ICartService CartService
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject NavigationManager NavigationManager
<PageTitle>Login</PageTitle>

<body>
<EditForm Model="user" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator/>
        <container class="container">
            <div class="d-flex justify-content-center h-100">
            <div class="card">
                <div class="card-header">
                    <center><h3>Ingresar</h3></center>
                    <br/>
                </div>
                <div class="card-body">
                        <label for="email">Correo Electronico</label>
                        <InputText id="email" @bind-Value="user.Email" class="form-control" ></InputText>
                        <ValidationMessage For="@(()=>user.Email)"/>
                        <label for="password">Contraseña</label>
                        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"></InputText>
                        <ValidationMessage For="@(()=>user.Password)"/>
                        <center><button type="submit" class="btn login_bt login_btn">Ingresar</button></center>
                        <div class="text-danger">
                            <span>@errorMessage</span>
                        </div>
                </div>
                <div class="card-footer">
				        <div class="d-flex justify-content-center links">
					        No tiene una cuenta?<a href="/register">Registrar</a>
				        </div>      
			    </div>
            </div>
            </div>
        </container>
    </EditForm>
</body>


@code {
    string errorMessage = string.Empty;
    private UserLogin user = new UserLogin();
    private string returnUrl = string.Empty;
    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl",out var url))
        {
            if (url != "register")
            {
                returnUrl = url;
            }
        }
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await CartService.StoreCartItems(true);
            await CartService.GetCartItemsCount();
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
        

    }
}
