@page "/login"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider;
<PageTitle>Login</PageTitle>
<center><h3>Ingresar</h3></center>
<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control" ></InputText>
        <ValidationMessage For="@(()=>user.Email)"/>
    </div>
    <div class="mb-3">
        <label for="password">Contraseña</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(()=>user.Password)"/>
    </div>
    <center><button type="submit" class="btn btn-primary">Ingresar</button></center>
</EditForm>
<br/>
<br/>
<div class="text-danger">
    <span>@errorMessage</span>
</div>
<br/>


@code {
    string errorMessage = string.Empty;
    private UserLogin user = new UserLogin();
    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("");
        }
        else
        {
            errorMessage = result.Message;
        }
        

    }
}
