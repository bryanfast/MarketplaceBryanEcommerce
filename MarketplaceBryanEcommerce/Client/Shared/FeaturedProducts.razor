@inject IProductService ProductService
@implements IDisposable

<center><h2>Productos Recomendados para el dia de Hoy</h2></center>

@if(ProductService.Products==null|| ProductService.Products.Count == 0)
{
<center>
    <div class="spinner-border" role="status">
      <span class="sr-only"></span>
    </div>
    <p>@ProductService.Message</p>
</center>
}
else
{
    <div class="container">
        @foreach(var product in ProductService.Products)
        {
            @if (product.Featured)
            {
                <div class="featured-product">
                    <div>
                        <a href="product/@product.Id">
                            <img class="img" src="@product.ImageUrl">
                        </a>
                    </div>
                    <h4><a href="product/@product.Id">@product.Title</a></h4>
                    @if(product.Variants!=null && product.Variants.Count > 0)
                    {
                        <h5 class="price">
                            $@product.Variants[0].Price
                        </h5>
                    }
                </div>
            }
        }
    </div>
}
@code {
    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }
    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }
}
